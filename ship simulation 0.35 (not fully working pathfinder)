import pygame
import sys
#Setup
pygame.init()
width, height = 1200, 700
screen = pygame.display.set_mode((width,height))
pygame.display.set_caption("Autonomous Ship Simulation")
FPS = 60
clock = pygame.time.Clock()






class Pos():    #class for locations on the map
    def __init__(self, place, parent):
        self.place = place  #coordinates of location
        self.parent = parent #parent position used to trace back the path
        self.f = 0 #g+h
        self.g = 0  #g is the cost to move to the tile from the start position linear movement adds 1 diagonal movement adds root 2
        self.h = 0 #heuristic cost from the tile to the goal

def pathfinding(world, start, end):
    startpos = Pos(start, None)
    endpos = Pos(end, None)
    
    openlist = [startpos]
    closedlist = []
    
    while openlist:
        currentpos = openlist[0]
        currenti = 0
        
        for i, pos in enumerate(openlist):
            if pos.f < currentpos.f:
                currentpos = pos
                currenti = i
                
        openlist.pop(currenti)
        closedlist.append(currentpos)
        
        if currentpos.place == endpos.place:
            path = []
            current = currentpos
            while current is not None:
                path.append(current.place)
                current = current.parent
            return path[::-1]
        
        children = []
        for i in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]:
            testpos = (currentpos.place[0] + i[0], currentpos.place[1] + i[1])
            
            if (testpos[0] < 0 or testpos[0] >= len(world) or testpos[1] < 0 or testpos[1] >= len(world[0])):
                continue
            
            if world[testpos[0]][testpos[1]] != 0:
                continue
            
            newpos = Pos(testpos, currentpos)
            children.append(newpos)
        
        for i in children:
            if i in closedlist:
                continue
            
            i.g = currentpos.g + 1
            i.h = ((i.place[0] - endpos.place[0]) ** 2) + ((i.place[1] - endpos.place[1]) ** 2)
            i.f = i.g + i.h
            
            for j in openlist:
                if i == j and i.g > j.g:  
                    j.g = i.g
                    j.parent = currentpos  
                    break
            else:
                openlist.append(i) 



def importData():                               ## defines Function called importData
    geoData = open("GeoData.csv", "r")          ## defines variable that contains the csv file in read mode
    tempString = geoData.read()                 ## defines a variable that contains a string of the raw data in the csv file
    templist1 = tempString.splitlines()         ## defines variable that is a list where each element is a string containing a line of the raw data
    tempLen1 = len(templist1)                   ## defines variable that is the number of elements in the list tempList1
    datalist = []                               ## defines empty list
    for n in range(tempLen1 - 1):               ## starts a for loop that has index n that increases from 0 by 1 each time until it reaches 1 less than tempLen1
        tempData1 = templist1[n +1]             ## defines varaiable that stoes data from the current(Nth + 1 term) element in tempList1
        tempList2 = tempData1.split(",")        ## defines a list where each element is a string that has been split by the comma form tempData1
        datalist.append(tempList2)              ## adds a new element to the list datalist where each new elemtn is a list in on of its self and is the current list in tempList2
    return datalist                             ## returns datalist after for loop is complete


def cleanUpData(portDataOld):                   ## defines funtion cleanUpData with data being passed in 
    newData = portDataOld                       ## defines variable newData that is the passed in data
    for n in range(len(portDataOld)):           ## starts for loop that has index n thats starts at 0 and increaes by 1 each loop until it reaches the number of elements - 1 in the newData
        for x in range(2):                      ## starts for loop where index x starts at 0 and increses to 1
            newData[n][x+1] = portDataOld[n][x+1].replace("Â","") ## replaces the character Â with nothing in the second and third element of each list within each element (That doesnt make sense)
    return newData                              ## returns new data


def convertXcoord(portData):
    for n in range(len(portData)):
        index = portData[n][2].rfind("°")
        xMinute = portData[n][2][index + 1:index + 3]
        degreeDecimal = int(xMinute)/60
        xDegrees = int(portData[n][2][1:index]) + degreeDecimal
        scaledCoord = (float(xDegrees)/180)*600
        test = "W" in portData[n][2]
        if test == True:
            xCoord = 520 - scaledCoord
        else:
            xCoord = 520 + scaledCoord
        portData[n][2] = xCoord
    return portData


portData = importData()                         ## calls the function importData and assigns its pass out into a variable
portData = cleanUpData(portData)
portData = convertXcoord(portData)

#Colors
blue= (100, 190, 230)
red=(255, 0, 0)
green=(31,96,35)






#background
land = pygame.image.load("earth 2.png").convert_alpha()
screenUpdate = pygame.transform.scale(land, (width,height))
mask= pygame.mask.from_surface(screenUpdate)
masksurface=mask.to_surface()

#Ship
class ship():
    def __init__(self,x,y,speed,ship_height,ship_width):
        self.x=x
        self.y=y
        self.speed=speed
        self.ship_height=ship_height
        self.ship_width=ship_width
        self.item=pygame.Rect(x,y,ship_width,ship_height)
        pygame.draw.rect(screen,red,self.item)
        
def moveship(ship,path):

    for i in range(len(path)):
        coord=path[i]
        ship.x= coord[0]
        ship.y=coord[1]
        print(coord[0],coord[1],ship.x,ship.y)
        ship.item=pygame.Rect(ship.x,ship.y,ship.ship_width,ship.ship_height)
        screen.fill(blue)
        screen.blit(screenUpdate, (0, 0))
        pygame.draw.rect(screen,red,ship.item)
        
        #pygame.draw.rect(screen, red, (ship.x,ship.y, ship.ship_width, ship.ship_height))
        pygame.time.delay(ship.speed)        
        pygame.display.flip()
    
        

#Update

screen.fill(blue)
screen.blit(screenUpdate,(0,0))
#ship_mask= pygame.mask.Mask((10,7))
#ship_mask.fill()


tiles=[]
for i in range(screenUpdate.get_width()):
    
    for j in range (screenUpdate.get_height()):
        if screen.get_at((i,j))== blue :
            tiles.append(0)
        else: tiles.append(1)

tiles = [[tiles[i + (screenUpdate.get_width())*j] for i in range(screenUpdate.get_width())] for j in range(screenUpdate.get_height()) ]
ship1=ship(0,0,150,10,7)
path1=pathfinding(tiles,(ship1.x,ship1.y),(9,7))
moveship(ship1,path1)



pygame.display.flip()  
clock.tick(FPS)
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()


            
            
            
