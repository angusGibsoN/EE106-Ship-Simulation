class Pos():
    def __init__(self, place, parent):
        self.place = place
        self.parent = parent
        self.f = 0
        self.g = 0
        self.h = 0

    def __eq__(self, other):
        return self.place == other.place

def pathfinding(world, start, end):
    startpos = Pos(start, None)
    endpos = Pos(end, None)
    
    openlist = [startpos]
    closedlist = []
    
    while openlist:
        currentpos = openlist[0]
        currenti = 0
        
        for i, pos in enumerate(openlist):
            if pos.f < currentpos.f:
                currentpos = pos
                currenti = i
                
        openlist.pop(currenti)
        closedlist.append(currentpos)
        
        if currentpos == endpos:
            path = []
            current = currentpos
            while current is not None:
                path.append(current.place)
                current = current.parent
            return path[::-1]
        
        children = []
        for i in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]:
            testpos = (currentpos.place[0] + i[0], currentpos.place[1] + i[1])
            
            if (testpos[0] < 0 or testpos[0] >= len(world) or testpos[1] < 0 or testpos[1] >= len(world[0])):
                continue
            
            if world[testpos[0]][testpos[1]] != 0:
                continue
            
            newpos = Pos(testpos, currentpos)
            children.append(newpos)
        
        for i in children:
            if i in closedlist:
                continue
            
            i.g = currentpos.g + 1
            i.h = ((i.place[0] - endpos.place[0]) ** 2) + ((i.place[1] - endpos.place[1]) ** 2)
            i.f = i.g + i.h
            
            for j in openlist:
                if i == j and i.g > j.g:  
                    openlist.append(i)


maze = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

start = (0, 0)
end = (0,0)

path = pathfinding(maze, start, end)
print(path)
